import React, { useState } from "react";
import { CardElement, useStripe, useElements } from "@stripe/react-stripe-js";
import styled from "@emotion/styled";
import axios from "axios";

import Row from "./prebuilt/Row";
import BillingDetailsFields from "./prebuilt/BillingDetailsFields";
import SubmitButton from "./prebuilt/SubmitButton";
import CheckoutError from "./prebuilt/CheckoutError";
import GridRow from "./grid/grid-row";

const CheckoutForm = ({ price, onSuccessfulCheckout }) => {
  const [isProcessing, setProcessingTo] = useState(false);
  const [checkoutError, setCheckoutError] = useState();

  const stripe = useStripe();
  const elements = useElements();

  // TIP
  // use the cardElements onChange prop to add a handler
  // for setting any errors:

  const handleCardDetailsChange = (ev) => {
    ev.error ? setCheckoutError(ev.error.message) : setCheckoutError();
  };

  const handleFormSubmit = async (ev) => {
    ev.preventDefault();

    const billingDetails = {
      name: ev.target.name.value,
      email: ev.target.email.value,
      address: {
        city: ev.target.city.value,
        line1: ev.target.address.value,
        state: ev.target.state.value,
        postal_code: ev.target.zip.value,
      },
    };

    setProcessingTo(true);

    const cardElement = elements.getElement("card");

    try {
      const { data: clientSecret } = await axios.post("/api/payment_intents", {
        amount: price * 100,
      });

      

      const paymentMethodReq = await stripe.createPaymentMethod({
        type: "card",
        card: cardElement,
        billing_details: billingDetails,
      });

      

      if (paymentMethodReq.error) {
        setCheckoutError(paymentMethodReq.error.message);
        setProcessingTo(false);
        return;
      }

      const { error } = await stripe.confirmCardPayment(clientSecret, {
        payment_method: paymentMethodReq.paymentMethod.id,
      });

      if (error) {
        setCheckoutError(error.message);
        setProcessingTo(false);
        return;
      }

      onSuccessfulCheckout();
    } catch (err) {
      setCheckoutError(err.message);
    }
  };

  // Learning
  // A common ask/bug that users run into is:
  // How do you change the color of the card element input text?
  // How do you change the font-size of the card element input text?
  // How do you change the placeholder color?
  // The answer to all of the above is to use the `style` option.
  // It's common to hear users confused why the card element appears impervious
  // to all their styles. No matter what classes they add to the parent element
  // nothing within the card element seems to change. The reason for this is that
  // the card element is housed within an iframe and:
  // > styles do not cascade from a parent window down into its iframes

  // const cardElementOpts = {
  //   iconStyle: "solid",
  //   style: iframeStyles,
  //   hidePostalCode: true,
  // };

  const CARD_OPTIONS = {
    iconStyle: "solid",
    style: {
      base: {
        iconColor: "#000000",
        color: "#000",
        fontWeight: 400,
        fontFamily: "'GP', sans-serif",
        fontSize: "2rem",
        letterSpacing: "-0.02em",
        // boxShadow: "5px 5px 6px rgba(0, 0, 0, 0.3) !important",
        // height: "2em",
        // lineHeight: "2em",
        fontSmoothing: "antialiased",
        ":-webkit-autofill": {
          color: "#000000",
        },
        "::placeholder": {
          color: "rgba(0, 0, 0, .1)",
        },
      },
      invalid: {
        iconColor: "red",
        color: "red",
      },
    },
  };

  return (
    <form onSubmit={handleFormSubmit}>
      <BillingDetailsFields />

      <div className="">
        <label className="text-nav pb-1em text-left">Payment Details</label>
        <div className="md:ml-1/10 box h-2em rounded-lg mb-2em">
          <div className="px-1/2em py-1/2em">
            <CardElement options={CARD_OPTIONS} onChange={handleCardDetailsChange} />
          </div>
        </div>
      </div>
      {checkoutError && (
        <div className="md:ml-1/10">
          <CheckoutError>{checkoutError}</CheckoutError>
        </div>
      )}
      <div className="md:ml-1/10">
        {/* TIP always disable your submit button while processing payments */}
        <SubmitButton disabled={isProcessing || !stripe}>
          {isProcessing ? "Processing..." : `Pay $${price}`}
        </SubmitButton>
      </div>
      <div className="mt-2em">
        <p>
          By clicking “Place Order” I agree to the Waitlist Terms and Conditions set in the link
          above.
        </p>
      </div>
      <GridRow />
    </form>
  );
};

export default CheckoutForm;
